<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GIGpanda</title>
  
  <subtitle>Life was like a box of chocolates,you never know what you’re gonna get</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gigpanda.github.io/"/>
  <updated>2019-01-01T14:27:00.469Z</updated>
  <id>https://gigpanda.github.io/</id>
  
  <author>
    <name>GIGpanda</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python语言的基本数据类型</title>
    <link href="https://gigpanda.github.io/2018/12/31/pythoncharacter/"/>
    <id>https://gigpanda.github.io/2018/12/31/pythoncharacter/</id>
    <published>2018-12-31T11:14:41.000Z</published>
    <updated>2019-01-01T14:27:00.469Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2018年的最后一天啦，很多人都去跨年了，但是笔者还是白天狗在图书馆备考离散数学和电路，晚上学习编程，笔者今天通过学习离散数学中的自反闭包、对称闭包、传递闭包，对于计算机中的关系矩阵的运算有了一点儿了解。希望明年有人陪笔者一起跨年吧，皮卡丘的皮。</p><h1 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h1><p>可正可负，没有取值范围限制</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pow(<span class="number">2</span>,<span class="number">100</span>)     <span class="comment">#计算结果 1267650600228229401496703205376</span></span><br></pre></td></tr></table></figure><h2 id="4种进制表示类型"><a href="#4种进制表示类型" class="headerlink" title="4种进制表示类型"></a>4种进制表示类型</h2><p>十进制: 1000, -10<br>二进制，以0b或0B开头: 0b101, -0B101<br>八进制，以0o或0O开头：0o123，-0O456<br>十六进制，以0x或0X开头：0x9a, -0X98</p><h1 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h1><p>带有小数点或小数的数字<br>取值范围数量级：-pow(10,308)~pow(10,308)<br>精度数量级：pow(10,-16)<br>浮点数运算间存在不确定尾数，不是bug<br>round(x,d) 对x四舍五入，d为小数截取位数<br>浮点数可以采用科学记数法表示：’a’e/E’b’ 表示a乘以10的b次方</p><h1 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h1><p>a+jb</p><h1 id="数值运算操作符"><a href="#数值运算操作符" class="headerlink" title="数值运算操作符"></a>数值运算操作符</h1><p>/ ：除 10/3=3.333333<br>// ：整除 10//3=3<br><strong> ：幂运算 x(</strong>)y x的y次幂     两个乘号</p><h1 id="数值运算函数"><a href="#数值运算函数" class="headerlink" title="数值运算函数"></a>数值运算函数</h1><p>divmod(商余): divmod(x,y)=(x//y,x%y)<br>pow(幂余)：pow(x,y[,z])=(x**y)%z z参数可以省略<br>round(x[,d]): 对x四舍五入，d为小数截取位数 d可以省略 默认为0<br>max(x1,x2,x3….): 返回最大值 个数不限<br>min(x1,x2,x3….): 返回最小值 个数不限<br>int(x): int(123.45)=213  int(“123”)=123<br>float(x): float(10)=10.0 float(“1.23”)=1.23<br>complex(x): complex(4)=4+0j</p><h1 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h1><p>由0个或多个字符组成的有序字符序列<br>字符串由一对单引号或双引号表示<br>字符串是字符的有序序列，可以对其中的字符进行索引<br>由一对单引号或双引号表示，仅表示单行字符串<br>由三单引号或三双引号表示，表示多行字符串<br>“这里有个单引号(‘)”  ‘这里有个双引号(“)’<br>三个<code>这里有个单引号(&#39;) 这还有个这里有个双引号(&quot;) 三个</code><br>使用[]获取一个字符或多个字符<br>索引：返回字符串中的单个字符 &lt;字符&gt;[]<br>切片：返回字符串中的多个字符 &lt;字符&gt;[m:n]<br>使用[m:n:k]根据步长对字符串切片<br>&lt;字符&gt; [m:n] m缺失表示至开头  n缺失表示至结尾<br>&lt;字符&gt; [m:n:k] 根据步长k对字符串切片  “012345678” [1:8:2] 1 3 5 7<br>tips [::-1] 逆序字符串<br>转义符：\ 转义符表达特定字符的本意</p><h1 id="字符串操作符"><a href="#字符串操作符" class="headerlink" title="字符串操作符"></a>字符串操作符</h1><p>x+y: 连接两个字符串<br>n*x: 复制n次x<br>x in s: 如果x是s的字串，则返回True，否者返回False</p><h1 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h1><p>len(x): 长度，返回字符串x的长度<br>str(x): 任何类型x对应的字符串形式 str(123)=”123” str([1,2])=”[1,2]” eval 互为一对函数<br>hex(x): 整数x的16进制小写形式字符串 hex(425)=”0x1a9”<br>oct(x): 整数x的8进制小写形式字符串  oct(425)=”0o651”<br>chr(x): x为Unicode编码  返回其对应的字符<br>ord(x): x为字符  返回其对应的Unicode编码</p><h1 id="字符串处理方法"><a href="#字符串处理方法" class="headerlink" title="字符串处理方法"></a>字符串处理方法</h1><p>str.lower()或str.upper(): 返回字符串的副本 全部字符小写/大写  “ABCdef”.lower=”abcdef”<br>str.split(sep=None): 返回一个列表 由str的sep进行分割 “a,b,c”.split(“,”)=”[‘a’,’b’,’c’]”<br>str.count(sub): 返回字串sub在str中出现的次数  apple.count(“p”)=2<br>str.replace(old,new): 返回字符串的副本 将所有的old替换为new python.replace(“n”,”n123”)=python123<br>str.center(“width”,[,fillchar]): 字符串根据宽度width居中 fillchar可选 python.center(“8”,”=”) ‘=python=’<br>str.strip(chars): 从str中去掉在其左侧或右侧chars中出现的字符 “=python=”.(“=”)=”python”<br>str.join(item): 在item变量除最后一个元素外每个元素后增加一个str “,”.join(“12345”)=”1,2,3,4,5”  主要用于字符串分割等</p><h1 id="字符串类型的格式化"><a href="#字符串类型的格式化" class="headerlink" title="字符串类型的格式化"></a>字符串类型的格式化</h1><p>槽<br>“{1}:计算机{0}的cpu占用率为{2}%”.format(“2019-1-1”,”c”,10)    {}中的数字对应format参数的序号</p><h1 id="format方法的格式控制"><a href="#format方法的格式控制" class="headerlink" title="format方法的格式控制"></a>format方法的格式控制</h1><p>   ：      &lt;填充&gt;       &lt;对齐&gt;     &lt;宽度&gt;               &lt;,&gt;          &lt;.精度&gt;         &lt;类型&gt;<br> 引导     用于填充的   &lt; 左对齐     槽设定的输出宽度    数字的千位    浮点数小数精度    整数类型 b c d o x X<br> 符号     单个字符     ^ 居中对齐                      分隔符       字符串的最大长度   浮点数类型 e E f %<br>                      &gt; 右对齐<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"&#123;0:=^20&#125;"</span>.format(<span class="string">"python"</span>))   <span class="comment"># '=======python======='</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#daydayup   好好学习 天天向上 早日成为大佬</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dayUp</span><span class="params">(df)</span>:</span>                          <span class="comment"># def定义函数</span></span><br><span class="line">    dayup=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">365</span>):</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">7</span> <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">6</span>]:</span><br><span class="line">            dayup=dayup*(<span class="number">1</span><span class="number">-0.01</span> )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dayup=dayup*(<span class="number">1</span>+df)</span><br><span class="line">    <span class="keyword">return</span> dayup</span><br><span class="line">dayfactor=<span class="number">0.01</span></span><br><span class="line"><span class="keyword">while</span> dayUp(dayfactor) &lt; <span class="number">37.8</span>:          <span class="comment"># while循环</span></span><br><span class="line">    dayfactor=dayfactor+<span class="number">0.001</span></span><br><span class="line">print(<span class="string">"工作日的努力参数&#123;:.3f&#125;"</span>.format(dayfactor))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天是2018年的最后一天啦，很多人都去跨年了，但是笔者还是白天狗在图书馆备考离散数学和电路，晚上学习编程，笔者今天通过学习离散数学中的自反闭包、对称闭包、传递闭包，对于计算机中的关系矩阵的运算有了一点儿了解。希望明年有人陪笔者一起跨年吧，皮卡丘的皮。&lt;/p&gt;
&lt;h1 id
      
    
    </summary>
    
      <category term="python" scheme="https://gigpanda.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://gigpanda.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>人生苦短 我用Python</title>
    <link href="https://gigpanda.github.io/2018/12/30/PythonDraw/"/>
    <id>https://gigpanda.github.io/2018/12/30/PythonDraw/</id>
    <published>2018-12-30T15:48:24.000Z</published>
    <updated>2019-01-01T10:41:40.335Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#PythonDraw</span></span><br><span class="line"><span class="keyword">import</span> turtle                            <span class="comment">#导入海龟库</span></span><br><span class="line">turtle.setup(<span class="number">650</span>,<span class="number">350</span>,<span class="number">200</span>,<span class="number">200</span>)            <span class="comment"># 设置画布 长 宽 与屏幕左上角相距坐标</span></span><br><span class="line">turtle.penup()                           <span class="comment"># 海龟飞起</span></span><br><span class="line">turtle.forward(<span class="number">-250</span>)                     <span class="comment"># 海龟后退</span></span><br><span class="line">turtle.pendown()                         <span class="comment"># 海龟下降</span></span><br><span class="line">turtle.pensize(<span class="number">20</span>)                       <span class="comment"># 画笔大小</span></span><br><span class="line">turtle.color(<span class="string">"red"</span>)                      <span class="comment"># 画笔颜色</span></span><br><span class="line">turtle.setheading(<span class="number">-40</span>)                   <span class="comment"># 海龟转向 绝对角度 相对于整个坐标系而言</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">4</span>):                      <span class="comment"># 做4次循环</span></span><br><span class="line">    turtle.circle(<span class="number">40</span>,<span class="number">80</span>)                 <span class="comment"># 画弧 圆心在海龟左边 半径为40像素 角度为80度</span></span><br><span class="line">    turtle.circle(<span class="number">-40</span>,<span class="number">80</span>)                <span class="comment"># 画弧 圆心在海龟右边 半径为40像素 角度为80度</span></span><br><span class="line">turtle.circle(<span class="number">40</span>,<span class="number">80</span>/<span class="number">2</span>)                   <span class="comment"># 画弧 圆心在海龟左边 半径为40像素 角度为40度</span></span><br><span class="line">turtle.forward(<span class="number">40</span>)                       <span class="comment"># 海龟前进</span></span><br><span class="line">turtle.circle(<span class="number">16</span>,<span class="number">180</span>)                    <span class="comment"># 画弧 圆心在海龟左边 半径为40像素 角度为80度</span></span><br><span class="line">turtle.forward(<span class="number">40</span>*<span class="number">2</span>/<span class="number">3</span>)                   <span class="comment"># 海龟前进</span></span><br><span class="line">turtle.down()                            <span class="comment"># 手动关闭 否者程序执行完毕自动关闭</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="python" scheme="https://gigpanda.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://gigpanda.github.io/tags/python/"/>
    
      <category term="turtle" scheme="https://gigpanda.github.io/tags/turtle/"/>
    
  </entry>
  
  <entry>
    <title>My First Blog</title>
    <link href="https://gigpanda.github.io/2018/12/02/my%20first%20blog/"/>
    <id>https://gigpanda.github.io/2018/12/02/my first blog/</id>
    <published>2018-12-02T14:43:00.000Z</published>
    <updated>2018-12-02T15:26:15.187Z</updated>
    
    <content type="html"><![CDATA[<p>其实笔者很早之前就想搭建基于Github+Hexo的个人博客，但一直没有时间。当笔者上个周末参加完2018年的ACM-ICPC亚洲区域赛(焦作)后，意识到自己和大佬之间的差距，于是就搭建了个人博客来记录笔者今后的学习生涯。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实笔者很早之前就想搭建基于Github+Hexo的个人博客，但一直没有时间。当笔者上个周末参加完2018年的ACM-ICPC亚洲区域赛(焦作)后，意识到自己和大佬之间的差距，于是就搭建了个人博客来记录笔者今后的学习生涯。&lt;/p&gt;

      
    
    </summary>
    
      <category term="ACM" scheme="https://gigpanda.github.io/categories/ACM/"/>
    
    
      <category term="Hexo" scheme="https://gigpanda.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://gigpanda.github.io/tags/Github/"/>
    
      <category term="ACM" scheme="https://gigpanda.github.io/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://gigpanda.github.io/2018/12/01/hello-world/"/>
    <id>https://gigpanda.github.io/2018/12/01/hello-world/</id>
    <published>2018-12-01T10:09:35.166Z</published>
    <updated>2018-12-01T10:09:35.166Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
